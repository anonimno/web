package dao;

import database.ConnectionManager;
import model.Activity;
import model.HourRange;
import model.Tag;

import java.sql.*;
import java.util.*;

public class ActivityDAO extends DAO<Activity> {
    // SQL statements
    private final String addActivity = "INSERT into Activity(name, description, difficultyLevel, pricePerPerson, minPersons, maxPersons, recommendedAge) values(?,?,?,?,?,?,?)";
    private final String deleteActivity = "DELETE from Activity where id=?";
    private final String selectAllActivities = "SELECT * from Activity";
    private final String selectActivity = "SELECT * from Activity where id = ?";
    private final String updateActivity = "UPDATE Activity SET name = ?, description = ?, difficultyLevel = ?, pricePerPerson = ?, minPersons = ?, maxPersons = ?, recommendedAge = ? where id = ?";
    private final String selectActivityTags = "SELECT Tag.* FROM Tag JOIN ActivityTags ON (Tag.id = ActivityTags.idTag) WHERE idActivity = ?";

    private HourRangeDAO hourRangeDAO;

    public void setHourRangeDAO(HourRangeDAO hourRangeDAO) {
        this.hourRangeDAO = hourRangeDAO;
    }

    public ActivityDAO() {
		super();
		initLog(ActivityDAO.class.getName());
	}

	@Override
	public void add(Activity toBeAdded) {

        //Insert the Activity and get its ID
        PreparedStatement stmt = null;
        long idActivityToBeInserted;

		Connection connection = null;

        try {
	        connection = ConnectionManager.getLazyConnection();
            stmt = connection.prepareStatement(addActivity, Statement.RETURN_GENERATED_KEYS);
            stmt.setString(1, toBeAdded.getName());
            stmt.setString(2, toBeAdded.getDescription());
            stmt.setByte(3, toBeAdded.getDifficultyLevel());
            stmt.setFloat(4, toBeAdded.getPricePerPerson());
            stmt.setInt(5, toBeAdded.getMinPers());
            stmt.setInt(6, toBeAdded.getMaxPers());
            stmt.setInt(7, toBeAdded.getRecommendedAge());

            stmt.executeUpdate();

            // Get autogenerated ID for Activity
            ResultSet tableKeys = stmt.getGeneratedKeys();
            tableKeys.next();
            idActivityToBeInserted = tableKeys.getLong("id");
	        toBeAdded.setId(idActivityToBeInserted);

	        if(!toBeAdded.getTags().isEmpty()) {
				// Insert Activity-Tag pairs
				String multipleTagsInsert = "INSERT INTO ActivityTags( idActivity, idTag ) VALUES ";

				for(Tag tag : toBeAdded.getTags()) {
					multipleTagsInsert += "(" + idActivityToBeInserted + "," + tag.getIdTag() + "),";
				}

				// Deleting last comma of query
				multipleTagsInsert = multipleTagsInsert.substring(0, multipleTagsInsert.length() - 1);

				stmt = connection.prepareStatement(multipleTagsInsert);
				stmt.executeUpdate();
			}

	        // Updating idActivity
	        for(HourRange hr : toBeAdded.getSchedule()) {
		        hr.setIdActivity(idActivityToBeInserted);
	        }

            // Insert HourRanges
	        // When using other queries in daos, always call this method with true and with false after the execution
	        ConnectionManager.queryInMultipleDAO(true);
            hourRangeDAO.addBulk(toBeAdded.getSchedule());
	        ConnectionManager.queryInMultipleDAO(false);

        } catch (SQLException e) {
            ErrorHandler.dealWithStatementCreation(e);
        } finally {
            ErrorHandler.dealWithStatementExecution(stmt, connection);
        }


	}

	@Override
	public void remove(Activity toBeRemoved) {

        PreparedStatement stmt = null;

		Connection connection = null;
        try {
	        connection = ConnectionManager.getLazyConnection();
            stmt = connection.prepareStatement(deleteActivity);
            stmt.setLong(1, toBeRemoved.getId());
            stmt.executeUpdate();
        } catch (SQLException e) {
            ErrorHandler.dealWithStatementCreation(e);
        } finally {
            ErrorHandler.dealWithStatementExecution(stmt, connection);
        }

	}

	@Override
	public void update(Activity toBeUpdated) {
        PreparedStatement stmt = null;
		Connection connection = null;

        try {
	        connection = ConnectionManager.getLazyConnection();
            stmt = connection.prepareStatement(updateActivity);
            stmt.setString(1, toBeUpdated.getName());
            stmt.setString(2, toBeUpdated.getDescription());
            stmt.setByte(3, toBeUpdated.getDifficultyLevel());
            stmt.setFloat(4, toBeUpdated.getPricePerPerson());
            stmt.setInt(5, toBeUpdated.getMinPers());
            stmt.setInt(6, toBeUpdated.getMaxPers());
            stmt.setInt(7, toBeUpdated.getRecommendedAge());

            stmt.setLong(8, toBeUpdated.getId());

            stmt.executeUpdate();


        } catch (SQLException e) {
            ErrorHandler.dealWithStatementCreation(e);
        } finally {
            ErrorHandler.dealWithStatementExecution(stmt, connection);
        }

	}

	@Override
	public Activity get(long id) {

        PreparedStatement stmt = null;
        ResultSet resultSet = null;
        Activity activity = new Activity();
        List<Tag> fetchedAsociatedTags = new LinkedList<>();

		Connection connection = null;
        try {
	        connection = ConnectionManager.getLazyConnection();
            //Get activity information from Activity Table
            stmt = connection.prepareStatement(selectActivity);
            stmt.setLong(1, id);
            resultSet = stmt.executeQuery();

            resultSet.next();

            activity.setId(resultSet.getLong("id"));
            activity.setName(resultSet.getString("name"));
            activity.setDescription(resultSet.getString("description"));
            activity.setPricePerPerson(resultSet.getFloat("pricePerPerson"));
	        activity.setDifficultyLevel(resultSet.getByte("difficultyLevel"));
            activity.setMinPers(resultSet.getInt("minPersons"));
            activity.setMaxPers(resultSet.getInt("maxPersons"));
            activity.setRecommendedAge(resultSet.getInt("recommendedAge"));

            // Get asociated Tags from ActivityTags table
            stmt = connection.prepareStatement(selectActivityTags);
            stmt.setLong(1, id);
            resultSet = stmt.executeQuery();

            while (resultSet.next()){
                Tag fetchedTag = new Tag();
                fetchedTag.setIdTag(resultSet.getLong("id"));
                fetchedTag.setTagName(resultSet.getString("name"));
                fetchedAsociatedTags.add(fetchedTag);
            }

            activity.setTags(fetchedAsociatedTags);

	        // When using other queries in daos, always call this method with true and with false after the execution
	        ConnectionManager.queryInMultipleDAO(true);
            activity.setSchedule(hourRangeDAO.getBulk(id));
	        ConnectionManager.queryInMultipleDAO(false);

        } catch (SQLException e) {
            ErrorHandler.dealWithStatementCreation(e);
            activity = null;
        } finally {
            ErrorHandler.dealWithStatementAndResultExecution(stmt, resultSet, connection);
        }

        return activity;
	}

	@Override
	public Set<Activity> list() {
		HashSet<Activity> activities = new LinkedHashSet<>();
		PreparedStatement prepStatement = null;
		ResultSet results = null;
        List<Tag> fetchedAsociatedTags = new LinkedList<>();

		Connection connection = null;

		try {
			connection = ConnectionManager.getLazyConnection();
			prepStatement = connection.prepareStatement(selectAllActivities);
			results = prepStatement.executeQuery();

			while (results.next()){
				Activity fetchedActivity = new Activity();

				fetchedActivity.setId(results.getLong("id"));
				fetchedActivity.setName(results.getString("name"));
				fetchedActivity.setDescription(results.getString("description"));
				fetchedActivity.setPricePerPerson(results.getFloat("pricePerPerson"));
				fetchedActivity.setDifficultyLevel(results.getByte("difficultyLevel"));
				fetchedActivity.setMinPers(results.getInt("minPersons"));
				fetchedActivity.setMaxPers(results.getInt("maxPersons"));
				fetchedActivity.setRecommendedAge(results.getInt("recommendedAge"));

                // Get asociated Tags from ActivityTags table
                prepStatement = connection.prepareStatement(selectActivityTags);
                prepStatement.setLong(1, fetchedActivity.getId());
                ResultSet fetchedTags = prepStatement.executeQuery();

                while (fetchedTags.next()){
                    Tag fetchedTag = new Tag();
                    fetchedTag.setIdTag(fetchedTags.getLong("id"));
                    fetchedTag.setTagName(fetchedTags.getString("name"));
                    fetchedAsociatedTags.add(fetchedTag);
                }

                fetchedActivity.setTags(fetchedAsociatedTags);

				// When using other queries in daos, always call this method with true and with false after the execution
				ConnectionManager.queryInMultipleDAO(true);
                fetchedActivity.setSchedule(hourRangeDAO.getBulk(fetchedActivity.getId()));
				ConnectionManager.queryInMultipleDAO(false);

				activities.add(fetchedActivity);
			}
		} catch (SQLException e) {
			ErrorHandler.dealWithStatementCreation(e);
			activities = null;
		} finally {
			ErrorHandler.dealWithStatementAndResultExecution(prepStatement, results, connection);
		}

		return activities;
	}
}

